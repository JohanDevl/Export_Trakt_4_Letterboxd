name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # Watch for pushes to branches and tags
  push:
    branches: ["main", "develop"]
    tags: ["v*.*.*"]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "LICENSE"

  # Watch for pull requests to main and develop branches
  pull_request:
    branches: ["main", "develop"]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "LICENSE"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      push_to_dockerhub:
        description: "Push to Docker Hub"
        required: false
        default: false
        type: boolean

env:
  # Default registry is GitHub Container Registry
  GITHUB_REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  GITHUB_IMAGE_NAME: ${{ github.repository }}
  # Docker Hub registry and image name
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE_NAME: johandevl/export-trakt-4-letterboxd

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      # Get version information for main branch
      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            # For tag 'v1.2.3', VERSION becomes '1.2.3'
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Get latest version tag
            LATEST_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 1)
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.0.0"
            fi
            # Store the version without the 'v' prefix
            VERSION=${LATEST_TAG#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            # For develop branch or others
            echo "version=dev" >> $GITHUB_OUTPUT
            echo "tag=develop" >> $GITHUB_OUTPUT
          fi

          # Get build date in ISO 8601 format
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

          # Get Git commit hash
          VCS_REF=$(git rev-parse --short HEAD)
          echo "vcs_ref=$VCS_REF" >> $GITHUB_OUTPUT

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against GitHub Container Registry
      - name: Log into GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login against Docker Hub
      - name: Log into Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: |
            ${{ env.GITHUB_REGISTRY }}/${{ env.GITHUB_IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            # For PR builds, use PR-#
            type=ref,event=pr,prefix=PR-
            # For semver tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Also add the vX.Y.Z format
            type=semver,pattern=v{{version}}
            # For branch-based tagging
            type=ref,event=branch
            # Add 'latest' tag for main branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # Add 'develop' tag for develop branch
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}

      # Debug step to see metadata output
      - name: Debug metadata
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "Ref: ${{ github.ref }}"

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true # Always push regardless of event type
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            APP_VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
            VCS_REF=${{ steps.version.outputs.vcs_ref }}
          # Add cache configuration
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Export Docker image for release
      - name: Export Docker image digest
        if: github.event_name != 'pull_request'
        id: digest
        run: |
          echo "Publishing successful, no need to extract digest"
          echo "digest=skipped" >> $GITHUB_OUTPUT

      # Sign the resulting Docker image digest for GitHub Container Registry
      - name: Sign the published Docker image for GitHub
        if: false # Temporarily disabled
        env:
          DIGEST: ${{ steps.digest.outputs.digest }}
        run: |
          echo "Skipping signing step to focus on successful publishing"
          # for TAG in ${{ steps.meta.outputs.tags }}; do
          #   echo "Signing image: ${TAG}@${DIGEST}"
          #   cosign sign --yes ${TAG}@${DIGEST} || echo "Warning: Failed to sign ${TAG}"
          # done

      # Create GitHub release for tags
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
