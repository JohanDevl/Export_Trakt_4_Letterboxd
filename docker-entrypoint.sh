#!/bin/bash
set -e

# Create config directory if it doesn't exist
mkdir -p /app/config

# Create example config file if it doesn't exist
if [ ! -f /app/config/.config.cfg.example ]; then
    echo "Creating example config file in config directory..."
    cat > /app/config/.config.cfg.example << 'EOF'
############################################################################
# TRAKT API CONFIGURATION
############################################################################
# API credentials - Get these from https://trakt.tv/oauth/applications
API_KEY="YOUR_API_KEY_HERE"
API_SECRET="YOUR_API_SECRET_HERE"
API_URL="https://api.trakt.tv"

# Authentication tokens - Generated by setup_trakt.sh
ACCESS_TOKEN=""
REFRESH_TOKEN=""
REDIRECT_URI="urn:ietf:wg:oauth:2.0:oob"

# User information
USERNAME="YOUR_TRAKT_USERNAME"

############################################################################
# DIRECTORY PATHS
############################################################################
# Backup and output directories
BACKUP_DIR="./backup/$(date +"%Y-%m-%d_%H-%M-%S")_trakt-backup"
DOSLOG="./logs"
DOSCOPY="./copy"
BRAIN_OPS="./brain_ops"

# Date format for filenames
DATE=$(date +%Y%m%d_%H%M)
LOG="${DOSLOG}/${DATE}-Export_Trakt.txt"

############################################################################
# DISPLAY SETTINGS
############################################################################
# Terminal colors
RED='\033[0;31m'     # Color code for error messages
GREEN='\033[0;32m'   # Color code for success messages
NC='\033[0m'         # No Color 
BOLD='\033[1m'       # Code for bold text
SAISPAS='\e[1;33;41m' # Background color code: 1;33 for yellow, 44 for red

############################################################################
# INITIALIZATION
############################################################################
# Create necessary directories if they don't exist
if [ -d ./TEMP ]; then
    rm -r ./TEMP
fi
mkdir TEMP

if [ ! -d $DOSLOG ]; then
    mkdir $DOSLOG
fi

if [ ! -d $DOSCOPY ]; then
    mkdir $DOSCOPY
fi

if [ ! -d $BRAIN_OPS ]; then
    mkdir $BRAIN_OPS
fi
EOF
    echo "Example config file created at /app/config/.config.cfg.example"
fi

# Check if config file exists
if [ ! -f /app/config/.config.cfg ]; then
    echo "Config file not found. Creating from template..."
    cp /app/config/.config.cfg.example /app/config/.config.cfg
    echo "Please edit /app/config/.config.cfg with your Trakt API credentials."
fi

# Function to verify and add missing variables to the config file
verify_config_variables() {
    local config_file="/app/config/.config.cfg"
    local example_file="/app/config/.config.cfg.example"
    local missing_vars=0
    local added_vars=0
    
    echo "Verifying configuration variables..."
    
    # Create a temporary file to store the list of required variables
    cat > /tmp/required_vars.txt << 'EOF'
API_KEY
API_SECRET
API_URL
ACCESS_TOKEN
REFRESH_TOKEN
REDIRECT_URI
USERNAME
BACKUP_DIR
DOSLOG
DOSCOPY
BRAIN_OPS
DATE
LOG
RED
GREEN
NC
BOLD
SAISPAS
EOF
    
    # Check each required variable
    while IFS= read -r var; do
        if ! grep -q "^${var}=" "$config_file"; then
            echo "Missing variable: ${var}"
            missing_vars=$((missing_vars + 1))
            
            # Extract the variable definition from the example file
            var_line=$(grep "^${var}=" "$example_file")
            
            if [ -n "$var_line" ]; then
                # Add the variable to the config file
                echo "$var_line" >> "$config_file"
                added_vars=$((added_vars + 1))
                echo "Added ${var} to config file"
            else
                echo "Warning: Could not find ${var} in example file"
            fi
        fi
    done < /tmp/required_vars.txt
    
    # Check for initialization section
    if ! grep -q "INITIALIZATION" "$config_file"; then
        echo "Missing INITIALIZATION section"
        
        # Extract the initialization section from the example file
        sed -n '/INITIALIZATION/,/^fi$/p' "$example_file" > /tmp/init_section.txt
        
        # Add the initialization section to the config file
        echo "" >> "$config_file"
        echo "############################################################################" >> "$config_file"
        echo "# INITIALIZATION" >> "$config_file"
        echo "############################################################################" >> "$config_file"
        cat /tmp/init_section.txt >> "$config_file"
        
        echo "Added INITIALIZATION section to config file"
        added_vars=$((added_vars + 1))
    fi
    
    # Clean up temporary files
    rm -f /tmp/required_vars.txt /tmp/init_section.txt
    
    # Report results
    if [ $missing_vars -eq 0 ]; then
        echo "✅ All required variables are present in the config file."
    else
        if [ $added_vars -eq $missing_vars ]; then
            echo "✅ Added $added_vars missing variables to the config file."
        else
            echo "⚠️ Found $missing_vars missing variables, but could only add $added_vars."
            echo "   Please check your config file manually."
        fi
    fi
}

# Remove any existing symlink or config file in the root directory
if [ -L /app/.config.cfg ] || [ -f /app/.config.cfg ]; then
    rm -f /app/.config.cfg
fi

# Create necessary directories with proper permissions
mkdir -p /app/logs /app/copy /app/brain_ops /app/backup /app/TEMP
chmod -R 777 /app/logs /app/copy /app/brain_ops /app/backup /app/TEMP /app/config

# Ensure the config file is writable
chmod 666 /app/config/.config.cfg 2>/dev/null || true
chmod 666 /app/config/.config.cfg.example 2>/dev/null || true

# Verify and add missing variables to the config file
verify_config_variables

# Make scripts executable
chmod +x /app/Export_Trakt_4_Letterboxd.sh /app/setup_trakt.sh

# Update scripts to use the config file in the config directory
sed -i 's|CONFIG_FILE="${SCRIPT_DIR}/.config.cfg"|CONFIG_FILE="/app/config/.config.cfg"|g' /app/setup_trakt.sh
sed -i 's|source ${SCRIPT_DIR}/.config.cfg|source /app/config/.config.cfg|g' /app/Export_Trakt_4_Letterboxd.sh

# Modify the permission settings in the Export_Trakt_4_Letterboxd.sh script
sed -i 's|chmod 644 "${DOSCOPY}/letterboxd_import.csv"|chmod 666 "${DOSCOPY}/letterboxd_import.csv"|g' /app/Export_Trakt_4_Letterboxd.sh

# Setup cron job if CRON_SCHEDULE is provided
if [ ! -z "${CRON_SCHEDULE}" ]; then
    # Install cron if not already installed
    if ! command -v cron &> /dev/null; then
        echo "Installing cron..."
        apk add --no-cache dcron
    fi

    # Set default export option if not provided
    EXPORT_OPTION=${EXPORT_OPTION:-normal}
    
    # Debug messages to help diagnose issues
    echo "=================================================="
    echo "DEBUG: Environment variables set:"
    echo "EXPORT_OPTION = ${EXPORT_OPTION}"
    echo "CRON_SCHEDULE = ${CRON_SCHEDULE}"
    echo "=================================================="
    
    echo "Setting up cron job with schedule: ${CRON_SCHEDULE}"
    echo "Export option: ${EXPORT_OPTION}"
    
    # Create a wrapper script for the cron job
    cat > /app/cron_wrapper.sh << EOF
#!/bin/bash
# Get the start time
START_TIME=$(date +"%Y-%m-%d %H:%M:%S")

# Log to container stdout with a friendly message
echo "🎬 [CRON] Starting Trakt to Letterboxd Export at ${START_TIME} 🎬" > /proc/1/fd/1
echo "📊 Exporting your Trakt data with option '${EXPORT_OPTION}'... This may take a few minutes." > /proc/1/fd/1
echo "DEBUG: Using export option: ${EXPORT_OPTION}" > /proc/1/fd/1

# Make sure directories have proper permissions
chmod -R 777 /app/logs /app/copy /app/brain_ops /app/backup

# Redirect all output to the log file
exec > /app/logs/cron_export.log 2>&1

# Print friendly messages
echo "========================================================"
echo "🎬 Starting Trakt to Letterboxd Export - $(date)"
echo "========================================================"
echo "🌟 Exporting your Trakt data to Letterboxd format..."
echo "📊 Using export option: ${EXPORT_OPTION}"
echo "========================================================"

# Run the export script
cd /app && ./Export_Trakt_4_Letterboxd.sh ${EXPORT_OPTION}

# Ensure the generated CSV file has the correct permissions
chmod 666 /app/copy/letterboxd_import.csv

# Get the end time
END_TIME=$(date +"%Y-%m-%d %H:%M:%S")

# Print completion message
echo "========================================================"
echo "✅ Export completed at $(date)"
echo "🎉 Your Letterboxd import file is ready in the copy directory!"
echo "========================================================"

# Log to container stdout with a friendly completion message
echo "✅ [CRON] Trakt to Letterboxd Export completed at ${END_TIME} ✅" > /proc/1/fd/1
echo "🎉 Your Letterboxd import file is ready in the copy directory! 🎉" > /proc/1/fd/1
EOF
    
    # Make the wrapper script executable
    chmod +x /app/cron_wrapper.sh
    
    # Create cron job using the wrapper script
    echo "${CRON_SCHEDULE} /app/cron_wrapper.sh" > /etc/crontabs/root
    
    # Make sure the log file exists and is writable
    touch /app/logs/cron_export.log
    chmod 666 /app/logs/cron_export.log
    
    # Start cron daemon with appropriate logging
    echo "Starting cron daemon..."
    crond -b -L 8
    
    echo "Cron job has been set up. Logs will be written to /app/logs/cron_export.log"
    echo "You can also see cron execution messages in the container logs."
fi

# Display help message
echo "=== Export Trakt 4 Letterboxd ==="
echo ""
echo "Available commands:"
echo "  setup_trakt.sh - Configure Trakt API authentication"
echo "  Export_Trakt_4_Letterboxd.sh [option] - Export Trakt data"
echo ""
echo "Options for Export_Trakt_4_Letterboxd.sh:"
echo "  normal (default) - Export rated movies, episodes, history, and watchlist"
echo "  initial - Export only rated and watched movies"
echo "  complete - Export all available data"
echo ""

# Execute command if provided, otherwise keep container running
if [ $# -gt 0 ]; then
    exec "$@"
else
    echo "No command provided. Container will stay alive for use with docker exec."
    echo "Use 'docker exec -it <container_name> bash' to connect to this container."
    
    # Keep the container running
    tail -f /dev/null
fi 